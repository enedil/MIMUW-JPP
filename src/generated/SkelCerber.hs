-- Haskell module generated by the BNF converter

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelCerber where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsCerber

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsCerber.Ident -> Result
transIdent x = case x of
  AbsCerber.Ident string -> failure x

transProgram :: Show a => AbsCerber.Program' a -> Result
transProgram x = case x of
  AbsCerber.PProgram _ topdefs -> failure x

transTopDef :: Show a => AbsCerber.TopDef' a -> Result
transTopDef x = case x of
  AbsCerber.FnDef _ type_ ident args block -> failure x

transArg :: Show a => AbsCerber.Arg' a -> Result
transArg x = case x of
  AbsCerber.VarArg _ type_ ident -> failure x
  AbsCerber.RefArg _ type_ ident -> failure x

transBlock :: Show a => AbsCerber.Block' a -> Result
transBlock x = case x of
  AbsCerber.BBlock _ stmts -> failure x

transStmt :: Show a => AbsCerber.Stmt' a -> Result
transStmt x = case x of
  AbsCerber.Empty _ -> failure x
  AbsCerber.BStmt _ block -> failure x
  AbsCerber.Decl _ type_ items -> failure x
  AbsCerber.Ass _ ident expr -> failure x
  AbsCerber.MAss _ expr1 expr2 -> failure x
  AbsCerber.Ret _ expr -> failure x
  AbsCerber.VRet _ -> failure x
  AbsCerber.VYield _ expr -> failure x
  AbsCerber.Cond _ expr stmt -> failure x
  AbsCerber.CondElse _ expr stmt1 stmt2 -> failure x
  AbsCerber.SExp _ expr -> failure x
  AbsCerber.Break _ -> failure x
  AbsCerber.Continue _ -> failure x
  AbsCerber.While _ expr stmt -> failure x
  AbsCerber.ForIn _ ident expr stmt -> failure x

transItem :: Show a => AbsCerber.Item' a -> Result
transItem x = case x of
  AbsCerber.NoInit _ ident -> failure x
  AbsCerber.Init _ ident expr -> failure x

transType :: Show a => AbsCerber.Type' a -> Result
transType x = case x of
  AbsCerber.Int _ -> failure x
  AbsCerber.Str _ -> failure x
  AbsCerber.Bool _ -> failure x
  AbsCerber.Void _ -> failure x
  AbsCerber.Fun _ type_ types -> failure x
  AbsCerber.Generator _ type_ -> failure x
  AbsCerber.Tuple _ types -> failure x
  AbsCerber.Function _ types -> failure x

transExpr :: Show a => AbsCerber.Expr' a -> Result
transExpr x = case x of
  AbsCerber.EVar _ ident -> failure x
  AbsCerber.ELitInt _ integer -> failure x
  AbsCerber.ELitTrue _ -> failure x
  AbsCerber.ELitFalse _ -> failure x
  AbsCerber.EApp _ expr exprs -> failure x
  AbsCerber.EString _ string -> failure x
  AbsCerber.Neg _ expr -> failure x
  AbsCerber.Not _ expr -> failure x
  AbsCerber.EMul _ expr1 mulop expr2 -> failure x
  AbsCerber.EAdd _ expr1 addop expr2 -> failure x
  AbsCerber.ERel _ expr1 relop expr2 -> failure x
  AbsCerber.EAnd _ expr1 expr2 -> failure x
  AbsCerber.EOr _ expr1 expr2 -> failure x
  AbsCerber.ETuple _ exprs -> failure x

transAddOp :: Show a => AbsCerber.AddOp' a -> Result
transAddOp x = case x of
  AbsCerber.Plus _ -> failure x
  AbsCerber.Minus _ -> failure x

transMulOp :: Show a => AbsCerber.MulOp' a -> Result
transMulOp x = case x of
  AbsCerber.Times _ -> failure x
  AbsCerber.Div _ -> failure x
  AbsCerber.Mod _ -> failure x

transRelOp :: Show a => AbsCerber.RelOp' a -> Result
transRelOp x = case x of
  AbsCerber.LTH _ -> failure x
  AbsCerber.LE _ -> failure x
  AbsCerber.GTH _ -> failure x
  AbsCerber.GE _ -> failure x
  AbsCerber.EQU _ -> failure x
  AbsCerber.NE _ -> failure x
